<%- include("../layouts/boilerplate") %>

<style>
  .event-form {
    background: #fff;
    border: 1px solid #ddd;
    transition: box-shadow 0.3s ease;
  }

  .event-form:hover {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }

  /* Red Border for Invalid Inputs */
  .error-border {
    border: 2px solid red !important;
  }

  /* Blue Border on Focus */
  .form-control:focus, .form-select:focus {
    border-color: #007bff !important;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5) !important;
  }

  .error-message {
    color: red;
    font-size: 0.875rem;
    margin-top: 5px;
  }

  .field-container {
    border: 1px dashed #ccc;
    min-height: 50px;
  }

  .field-item {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 15px;
    background: #f9f9f9;
    padding: 12px;
    border-radius: 5px;
    transition: transform 0.2s ease;
  }

  .field-item:hover {
    transform: scale(1.02);
  }

  .field-item input[type="text"],
  .field-item select {
    flex: 1;
    min-width: 0;
    width: 100%; /* Ensure fields scale with container */
  }

  .field-item .form-check-label {
    margin-right: 10px;
    white-space: nowrap;
  }

  .btn-outline-primary {
    border-color: #007bff;
    color: #007bff;
    transition: all 0.3s ease;
  }

  .btn-outline-primary:hover {
    background-color: #007bff;
    color: #fff;
    transform: translateY(-2px);
  }

  .btn-danger {
    background-color: #dc3545;
    border: none;
    transition: all 0.3s ease;
  }

  .btn-danger:hover {
    background-color: #c82333;
    transform: translateY(-2px);
  }

  .btn-success {
    background-color: #28a745;
    border: none;
    padding: 12px 0;
    transition: all 0.3s ease;
    width: 100%; /* Ensure submit button scales with container */
  }

  .btn-success:hover {
    background-color: #218838;
    transform: translateY(-2px);
  }

  @media (max-width: 768px) {
    .event-form {
      padding: 15px;
    }
    .btn-lg {
      padding: 10px;
    }
    .field-item {
      flex-wrap: wrap;
      gap: 10px;
    }
    .field-item input[type="text"],
    .field-item select {
      width: 100%;
    }
  }

  .field-row {
  display: flex;
  gap: 10px;
  align-items: center;
  margin-bottom: 10px;
}

.field-row .form-control,
.field-row .form-check-label {
  flex: 1;
}

@media (max-width: 990px) {
  .field-item .col-md-4,
  .field-item .col-md-3,
  .field-item .col-md-2 {
    flex: 0 0 100%;
    max-width: 100%;
  }
  .field-item .text-end {
    text-align: left !important;
    margin-top: 5px;
  }
}


</style>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-10"> <!-- Increased container width -->
      <h3 class="text-center mb-4">Create New Event</h3>

      <form
        method="post"
        action="/<%= club.ClubName %>/createpost"
        novalidate
        class="needs-validation event-form shadow p-4 rounded"
        enctype="multipart/form-data"
        id="createEventForm"
      >
        <!-- Event Name -->
        <div class="mb-4">
          <label for="eventName" class="form-label fw-bold">Event Name</label>
          <input
            type="text"
            id="eventName"
            name="eventName"
            placeholder="Enter Event Name"
            class="form-control form-control-lg"
            required
          />
          <div class="invalid-feedback">Please enter a valid event name.</div>
        </div>

        <!-- Description -->
        <div class="mb-4">
          <label for="description" class="form-label fw-bold">Description</label>
          <textarea
            id="description"
            name="eventDetails"
            placeholder="Event details"
            class="form-control"
            rows="4"
            required
          ></textarea>
          <div class="invalid-feedback">Please enter a valid description</div>
        </div>

        <!-- Image Upload -->
        <div class="mb-4">
          <label for="image" class="form-label fw-bold">Upload Image</label>
          <input
            type="file"
            id="image"
            name="image"
            class="form-control"
            required
          />
          <div class="invalid-feedback">Please upload an event photo.</div>
        </div>

        <!-- Visibility -->
        <div class="mb-4">
          <label class="form-label fw-bold">Visibility</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              name="visibility"
              value="collegeExclusive"
              id="collegeExclusive"
              required
            />
            <label class="form-check-label" for="collegeExclusive">
              College Exclusive
            </label>
          </div>
          <div class="form-check mt-3">
            <input
              class="form-check-input"
              type="radio"
              name="visibility"
              value="openToAll"
              id="openToAll"
            />
            <label class="form-check-label" for="openToAll">Open to All</label>
          </div>
          <div id="visibilityError" class="error-message"></div>
        </div>

        <div class="mb-4">
          <label class="form-label fw-bold">Branch Visibility</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="radio"
              name="branchVisibility"
              value="branchExclusive"
              id="branchExclusive"
              required
            />
            <label class="form-check-label" for="branchExclusive">
              Branch Exclusive
            </label>
          </div>
          <div class="form-check mt-3">
            <input
              class="form-check-input"
              type="radio"
              name="branchVisibility"
              value="openToAllBranches"
              id="openToAllBranches"
            />
            <label class="form-check-label" for="openToAllBranches"
              >Open to All Branches</label
            >
          </div>
          <div id="branchVisibilityError" class="error-message"></div>
        </div>

        <div class="mb-4">
          <label for="branchName" class="form-label fw-bold"
            >Branch Details (If selected Branch Exclusive)</label
          >
          <input
            id="branchName"
            name="branchName"
            placeholder="Branch Name"
            class="form-control"
            rows="4"
          ></input>
          <div id="branchNameError" class="error-message"></div>
        </div>

        <!-- Event Dates -->
        <div class="mb-3">
          <label for="startDate" class="form-label fw-bold"
            >Start Date & Time</label
          >
          <input
            type="datetime-local"
            id="startDate"
            name="startDate"
            class="form-control"
            required
          />
          <div class="invalid-feedback">Please set the event starting time.</div>
        </div>

        <div class="mb-3">
          <label for="endDate" class="form-label fw-bold"
            >End Date & Time</label
          >
          <input
            type="datetime-local"
            id="endDate"
            name="endDate"
            class="form-control"
            required
          />
          <div class="invalid-feedback">Please set the event ending time.</div>
        </div>

        <div class="mb-3">
          <label for="registrationDeadline" class="form-label fw-bold"
            >Registration Deadline</label
          >
          <input
            type="datetime-local"
            id="registrationDeadline"
            name="registrationDeadline"
            class="form-control"
            required
          />
          <div class="invalid-feedback">Please set the specify registration deadline</div>
        </div>

        <!-- Mode -->
        <div class="mb-3">
          <label for="mode" class="form-label fw-bold">Event Mode</label>
          <select name="mode" id="mode" class="form-select" required>
            <option value="">Select Mode</option>
            <option value="online">Online</option>
            <option value="offline">Offline</option>
            <option value="hybrid">Hybrid</option>
          </select>
          <div class="invalid-feedback">Please set event mode.</div>
        </div>

        <!-- Venue & Meeting Link -->
        <div class="mb-3">
          <label for="venue" class="form-label fw-bold"
            >Venue (if offline)</label
          >
          <input type="text" id="venue" name="venue" class="form-control" />
          <div id="venueError" class="error-message"></div>
        </div>

        <div class="mb-3">
          <label for="meetingLink" class="form-label fw-bold"
            >Meeting Link (if online)</label
          >
          <input
            type="url"
            id="meetingLink"
            name="meetingLink"
            class="form-control"
          />
          <div id="meetingLinkError" class="error-message"></div>
        </div>

        <!-- Coordinators -->
        <div class="mb-3">
          <label class="form-label fw-bold">Event Coordinators</label>
          <div id="coordinatorContainer">
            <div class="row g-2 mb-2 align-items-center coordinator-row">
              <div class="col-md-5">
                <input
                  type="text"
                  name="coordinators[0][name]"
                  class="form-control"
                  placeholder="Name"
                  required
                />
              </div>
              <div class="col-md-5">
                <input
                  type="text"
                  name="coordinators[0][contact]"
                  class="form-control"
                  placeholder="Contact"
                  required
                />
              </div>
              <div class="col-md-2 text-start">
                <button type="button" class="btn btn-danger btn-sm remove-coordinator">Remove</button>
              </div>
            </div>
          </div>
          <button
            type="button"
            id="addCoordinatorBtn"
            class="btn btn-outline-primary btn-sm mt-2"
          >
            + Add Coordinator
          </button>
        </div>

        <!-- Registration Settings -->
        <div class="mb-3">
          <label class="form-label fw-bold">Registration Required?</label>
          <div class="form-check">
            <input
              class="form-check-input"
              type="checkbox"
              name="registrationRequired"
              id="registrationRequired"
              checked
            />
            <label class="form-check-label" for="registrationRequired"
              >Yes</label
            >
          </div>
        </div>

        <div class="mb-3">
          <label for="participantLimit" class="form-label fw-bold"
            >Participant Limit</label
          >
          <input
            type="number"
            id="participantLimit"
            name="participantLimit"
            class="form-control"
          />
          <div id="participantLimitError" class="error-message"></div>
        </div>

        <div class="mb-3">
          <label for="eligibility" class="form-label fw-bold"
            >Eligibility Criteria</label
          >
          <input
            type="text"
            id="eligibility"
            name="eligibility"
            class="form-control"
            placeholder="e.g. Only 2nd Year CSE students"
          />
          <div id="eligibilityError" class="error-message"></div>
        </div>

        <!-- Participation Type -->
<div class="mb-4">
  <label class="form-label fw-bold">Participation Type</label>
  <div class="form-check">
    <input
      class="form-check-input"
      type="radio"
      name="participationType"
      value="individual"
      id="individual"
      checked
      required
    />
    <label class="form-check-label" for="individual">
      Individual
    </label>
  </div>
  <div class="form-check mt-2">
    <input
      class="form-check-input"
      type="radio"
      name="participationType"
      value="team"
      id="team"
    />
    <label class="form-check-label" for="team">Team</label>
  </div>
  <div id="participationTypeError" class="error-message"></div>
</div>


        <div class="mb-3 row">
          <div class="col-md-6">
            <label for="teamSizeMin" class="form-label fw-bold"
              >Min Team Size</label
            >
            <input
              type="number"
              id="teamSizeMin"
              name="teamSize[min]"
              class="form-control"
              value="1"
              required
            />
            <div class="invalid-feedback">Please set minimum team size.</div>
          </div>
          <div class="col-md-6">
            <label for="teamSizeMax" class="form-label fw-bold"
              >Max Team Size</label
            >
            <input
              type="number"
              id="teamSizeMax"
              name="teamSize[max]"
              class="form-control"
              value="1"
              required
            />
            <div class="invalid-feedback">Please set maximum team size.</div>
          </div>
        </div>

        <!-- Rewards, Sponsors, Agenda -->
        <div class="mb-3">
          <label for="rewards" class="form-label fw-bold"
            >Rewards / Prizes</label
          >
          <textarea
            id="rewards"
            name="rewards"
            class="form-control"
            rows="2"
            required
          ></textarea>
          <div class="invalid-feedback">Please specify rewards for winners.</div>
        </div>

        <div class="mb-3">
          <label for="agenda" class="form-label fw-bold">Event Agenda</label>
          <textarea
            id="agenda"
            name="agenda"
            class="form-control"
            rows="3"
            required
          ></textarea>
          <div class="invalid-feedback">Please specify this event agenda.</div>
        </div>

        <!-- Dynamic Form Fields -->
<div class="mb-4">
  <label class="form-label fw-bold">Custom Registration Fields</label>
  <div
    id="formFieldsContainer"
    class="field-container p-3 rounded bg-light"
  ></div>
  <div class="invalid-feedback" id="fieldError">
    Please add at least one custom registration field.
  </div>
  <button
    type="button"
    id="addField"
    class="btn btn-outline-primary mt-3 w-100"
  >
    <i class="fas fa-plus me-2"></i>Add Field
  </button>
</div>

        <!-- Submit Button -->
        <div class="text-center">
          <button type="submit" class="btn btn-success btn-lg w-100">
            Submit Event
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.getElementById("addField").addEventListener("click", () => {
  const fieldDiv = document.createElement("div");
  fieldDiv.classList.add("row", "g-2", "align-items-center", "mb-2", "field-item");

  fieldDiv.innerHTML = `
    <div class="col-md-4">
      <input type="text" name="formFields[label][]" placeholder="Field Name" class="form-control" required>
    </div>
    <div class="col-md-3">
      <select name="formFields[type][]" class="form-select" required>
        <option value="text">Text</option>
        <option value="email">Email</option>
        <option value="number">Number</option>
        <option value="checkbox">Checkbox</option>
      </select>
    </div>
    <div class="col-md-3 d-flex align-items-center">
      <div class="form-check">
        <input type="checkbox" name="formFields[isRequired][]" value="true" class="form-check-input">
        <label class="form-check-label">Required</label>
      </div>
    </div>
    <div class="text-start">
      <button type="button" class="btn btn-danger btn-sm remove-field">Remove</button>
    </div>
  `;

  document.getElementById("formFieldsContainer").appendChild(fieldDiv);

  // Remove functionality
  fieldDiv.querySelector(".remove-field").addEventListener("click", () => {
    fieldDiv.remove();
  });
});



  let coordinatorIndex = 1;

  document
    .getElementById("addCoordinatorBtn")
    .addEventListener("click", function () {
      const container = document.getElementById("coordinatorContainer");

      const row = document.createElement("div");
      row.className = "row g-2 mb-2 align-items-center coordinator-row";

      row.innerHTML = `
      <div class="col-md-5">
        <input type="text" name="coordinators[${coordinatorIndex}][name]" class="form-control" placeholder="Name" required style="width: 100%;" />
      </div>
      <div class="col-md-5">
        <input type="text" name="coordinators[${coordinatorIndex}][contact]" class="form-control" placeholder="Contact" required style="width: 100%;" />
      </div>
      <div class="col-md-2 text-start">
        <button type="button" class="btn btn-danger btn-sm remove-coordinator">Remove</button>
      </div>
    `;

      container.appendChild(row);
      coordinatorIndex++;

      // Add remove functionality
      row.querySelector(".remove-coordinator").addEventListener("click", () => {
        row.remove();
      });
    });

  document.getElementById("createEventForm").addEventListener("submit", function (event) {
    let isValid = true;

    // Get input fields
    const eventNameInput = document.getElementById("eventName");
    const descriptionInput = document.getElementById("description");
    const imageInput = document.getElementById("image");
    const visibilityInputs = document.getElementsByName("visibility");
    const branchVisibilityInputs = document.getElementsByName("branchVisibility");
    const startDateInput = document.getElementById("startDate");
    const endDateInput = document.getElementById("endDate");
    const registrationDeadlineInput = document.getElementById("registrationDeadline");
    const modeInput = document.getElementById("mode");

    // Get error message elements
    const eventNameError = document.getElementById("eventNameError");
    const descriptionError = document.getElementById("descriptionError");
    const imageError = document.getElementById("imageError");
    const visibilityError = document.getElementById("visibilityError");
    const branchVisibilityError = document.getElementById("branchVisibilityError");
    const startDateError = document.getElementById("startDateError");
    const endDateError = document.getElementById("endDateError");
    const registrationDeadlineError = document.getElementById("registrationDeadlineError");
    const modeError = document.getElementById("modeError");

    // Reset errors and styles
    eventNameError.textContent = "";
    descriptionError.textContent = "";
    imageError.textContent = "";
    visibilityError.textContent = "";
    branchVisibilityError.textContent = "";
    startDateError.textContent = "";
    endDateError.textContent = "";
    registrationDeadlineError.textContent = "";
    modeError.textContent = "";
    eventNameInput.classList.remove("error-border");
    descriptionInput.classList.remove("error-border");
    imageInput.classList.remove("error-border");
    modeInput.classList.remove("error-border");
    startDateInput.classList.remove("error-border");
    endDateInput.classList.remove("error-border");
    registrationDeadlineInput.classList.remove("error-border");

    // Validate Event Name
    if (eventNameInput.value.trim() === "") {
      eventNameError.textContent = "Please enter an event name.";
      eventNameInput.classList.add("error-border");
      isValid = false;
    }

    // Validate Description
    if (descriptionInput.value.trim() === "") {
      descriptionError.textContent = "Please enter event details.";
      descriptionInput.classList.add("error-border");
      isValid = false;
    }

    // Validate Image Upload
    if (imageInput.files.length === 0) {
      imageError.textContent = "Please upload an image.";
      imageInput.classList.add("error-border");
      isValid = false;
    }

    // Validate Visibility
    let visibilitySelected = false;
    visibilityInputs.forEach(input => {
      if (input.checked) visibilitySelected = true;
    });
    if (!visibilitySelected) {
      visibilityError.textContent = "Please select a visibility option.";
      isValid = false;
    }

    // Validate Branch Visibility
    let branchVisibilitySelected = false;
    branchVisibilityInputs.forEach(input => {
      if (input.checked) branchVisibilitySelected = true;
    });
    if (!branchVisibilitySelected) {
      branchVisibilityError.textContent = "Please select a branch visibility option.";
      isValid = false;
    }

    // Validate Dates
    if (startDateInput.value === "") {
      startDateError.textContent = "Start date and time are required.";
      startDateInput.classList.add("error-border");
      isValid = false;
    }

    if (endDateInput.value === "") {
      endDateError.textContent = "End date and time are required.";
      endDateInput.classList.add("error-border");
      isValid = false;
    }

    if (registrationDeadlineInput.value === "") {
      registrationDeadlineError.textContent = "Registration deadline is required.";
      registrationDeadlineInput.classList.add("error-border");
      isValid = false;
    }

    // Validate Mode
    if (modeInput.value === "") {
      modeError.textContent = "Please select an event mode.";
      modeInput.classList.add("error-border");
      isValid = false;
    }

    if (!isValid) {
      event.preventDefault();
    }
  });

  // Real-time Validation - Remove Error on Input
  document.querySelectorAll("input, select, textarea").forEach((input) => {
    input.addEventListener("input", function () {
      if (this.type === "file") {
        if (this.files.length > 0) {
          this.classList.remove("error-border");
          document.getElementById(this.id + "Error").textContent = "";
        }
      } else if (this.type === "radio") {
        if (this.checked) {
          document.getElementById(this.name + "Error").textContent = "";
        }
      } else {
        if (this.value.trim() !== "") {
          this.classList.remove("error-border");
          document.getElementById(this.id + "Error").textContent = "";
        }
      }
    });
  });

  // Bootstrap validation
  (() => {
    'use strict';
    const forms = document.querySelectorAll('.needs-validation');
    Array.from(forms).forEach(form => {
      form.addEventListener(
        'submit',
        event => {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        },
        false
      );
    });
  })();
  
  const form = document.getElementById("createEventForm");
const fieldError = document.getElementById("fieldError");

// Submit validation for custom fields
form.addEventListener("submit", (event) => {
  const fieldItems = document.querySelectorAll(".field-item");
  let hasEmpty = false;

  if (fieldItems.length === 0) {
    // No fields added
    fieldError.textContent = "Please add at least one custom registration field.";
    fieldError.style.display = "block";
    event.preventDefault();
    return;
  }

  // Check each input/select in every field-item
  fieldItems.forEach((item) => {
    const inputs = item.querySelectorAll("input, select");
    inputs.forEach((input) => {
      if (input.hasAttribute("required") && input.value.trim() === "") {
        input.classList.add("is-invalid"); // Bootstrap red highlight
        hasEmpty = true;
      } else {
        input.classList.remove("is-invalid");
      }
    });
  });

  if (hasEmpty) {
    fieldError.textContent = "Please fill in all required custom fields.";
    fieldError.style.display = "block";
    event.preventDefault();
  } else {
    fieldError.style.display = "none";
  }
});

// Optional: remove red highlight on input
document.getElementById("formFieldsContainer").addEventListener("input", (e) => {
  if (e.target.classList.contains("is-invalid") && e.target.value.trim() !== "") {
    e.target.classList.remove("is-invalid");
    // Hide error if all fields are now filled
    const remainingInvalid = document.querySelectorAll(".field-item .is-invalid");
    if (remainingInvalid.length === 0) {
      fieldError.style.display = "none";
    }
  }
});

document.addEventListener("DOMContentLoaded", function () {
    const individualRadio = document.getElementById("individual");
    const teamRadio = document.getElementById("team");
    const minInput = document.getElementById("teamSizeMin");
    const maxInput = document.getElementById("teamSizeMax");

    function updateTeamSize() {
      if (individualRadio.checked) {
        minInput.value = 1;
        maxInput.value = 1;
        minInput.setAttribute("readonly", true);
        maxInput.setAttribute("readonly", true);
      } else {
        minInput.removeAttribute("readonly");
        maxInput.removeAttribute("readonly");
      }
    }

    individualRadio.addEventListener("change", updateTeamSize);
    teamRadio.addEventListener("change", updateTeamSize);

    updateTeamSize(); // run on page load
  });
</script>